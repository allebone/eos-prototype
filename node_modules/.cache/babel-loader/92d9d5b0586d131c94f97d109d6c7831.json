{"remainingRequest":"/home/beskar/eos-prototype-users/node_modules/thread-loader/dist/cjs.js!/home/beskar/eos-prototype-users/node_modules/babel-loader/lib/index.js!/home/beskar/eos-prototype-users/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/beskar/eos-prototype-users/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/beskar/eos-prototype-users/src/views/components/toasts/ToastsAdvance.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/beskar/eos-prototype-users/src/views/components/toasts/ToastsAdvance.vue","mtime":1609867154645},{"path":"/home/beskar/eos-prototype-users/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beskar/eos-prototype-users/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beskar/eos-prototype-users/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/beskar/eos-prototype-users/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/beskar/eos-prototype-users/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEJDYXJkQ29kZSBmcm9tICdAY29yZS9jb21wb25lbnRzL2ItY2FyZC1jb2RlJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgppbXBvcnQgeyBCQnV0dG9uLCBCU3Bpbm5lciwgQkNhcmRUZXh0IH0gZnJvbSAnYm9vdHN0cmFwLXZ1ZSc7CmltcG9ydCBSaXBwbGUgZnJvbSAndnVlLXJpcHBsZS1kaXJlY3RpdmUnOwppbXBvcnQgeyBjb2RlQWR2YW5jZSB9IGZyb20gJy4vY29kZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBCQ2FyZENvZGU6IEJDYXJkQ29kZSwKICAgIEJCdXR0b246IEJCdXR0b24sCiAgICBCQ2FyZFRleHQ6IEJDYXJkVGV4dCwKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgQlNwaW5uZXI6IEJTcGlubmVyCiAgfSwKICBkaXJlY3RpdmVzOiB7CiAgICBSaXBwbGU6IFJpcHBsZQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvdW50OiAwLAogICAgICBjb2RlQWR2YW5jZTogY29kZUFkdmFuY2UKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBwb3BUb2FzdDogZnVuY3Rpb24gcG9wVG9hc3QoKSB7CiAgICAgIC8vIFVzZSBhIHNob3J0ZXIgbmFtZSBmb3IgdGhpcy4kY3JlYXRlRWxlbWVudAogICAgICB2YXIgaCA9IHRoaXMuJGNyZWF0ZUVsZW1lbnQ7IC8vIEluY3JlbWVudCB0aGUgdG9hc3QgY291bnQKCiAgICAgIHRoaXMuY291bnQgKz0gMTsgLy8gQ3JlYXRlIHRoZSBtZXNzYWdlCgogICAgICB2YXIgdk5vZGVzTXNnID0gaCgncCcsIHsKICAgICAgICAiY2xhc3MiOiBbJ3RleHQtY2VudGVyJywgJ21iLTAnXQogICAgICB9LCBbaCgnYi1zcGlubmVyJywgewogICAgICAgIHByb3BzOiB7CiAgICAgICAgICB0eXBlOiAnZ3JvdycsCiAgICAgICAgICBzbWFsbDogdHJ1ZQogICAgICAgIH0KICAgICAgfSksICcgRmxhc2h5ICcsIGgoJ3N0cm9uZycsICd0b2FzdCcpLCAiIG1lc3NhZ2UgIyIuY29uY2F0KHRoaXMuY291bnQsICIgIiksIGgoJ2Itc3Bpbm5lcicsIHsKICAgICAgICBwcm9wczogewogICAgICAgICAgdHlwZTogJ2dyb3cnLAogICAgICAgICAgc21hbGw6IHRydWUKICAgICAgICB9CiAgICAgIH0pXSk7IC8vIENyZWF0ZSB0aGUgdGl0bGUKCiAgICAgIHZhciB2Tm9kZXNUaXRsZSA9IGgoJ2RpdicsIHsKICAgICAgICAiY2xhc3MiOiBbJ2QtZmxleCcsICdmbGV4LWdyb3ctMScsICdhbGlnbi1pdGVtcy1iYXNlbGluZScsICdtci0yJ10KICAgICAgfSwgW2goJ3N0cm9uZycsIHsKICAgICAgICAiY2xhc3MiOiAnbXItMicKICAgICAgfSwgJ1RoZSBUaXRsZScpLCBoKCdzbWFsbCcsIHsKICAgICAgICAiY2xhc3MiOiAnbWwtYXV0byBmb250LWl0YWxpY3MnCiAgICAgIH0sICc1IG1pbnV0ZXMgYWdvJyldKTsgLy8gUGFzcyB0aGUgVk5vZGVzIGFzIGFuIGFycmF5IGZvciBtZXNzYWdlIGFuZCB0aXRsZQoKICAgICAgdGhpcy4kYnZUb2FzdC50b2FzdChbdk5vZGVzTXNnXSwgewogICAgICAgIHRpdGxlOiBbdk5vZGVzVGl0bGVdLAogICAgICAgIHNvbGlkOiBmYWxzZSwKICAgICAgICB2YXJpYW50OiAnaW5mbycKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["ToastsAdvance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAA,SAAA,MAAA,8BAAA,C,CACA;;AACA,SAAA,OAAA,EAAA,QAAA,EAAA,SAAA,QAAA,eAAA;AACA,OAAA,MAAA,MAAA,sBAAA;AACA,SAAA,WAAA,QAAA,QAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,SAAA,EAAA,SAHA;AAIA;AACA,IAAA,QAAA,EAAA;AALA,GADA;AAQA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA;AADA,GARA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,CADA;AAEA,MAAA,WAAA,EAAA;AAFA,KAAA;AAIA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA;AACA,UAAA,CAAA,GAAA,KAAA,cAAA,CAFA,CAGA;;AACA,WAAA,KAAA,IAAA,CAAA,CAJA,CAKA;;AACA,UAAA,SAAA,GAAA,CAAA,CAAA,GAAA,EAAA;AAAA,iBAAA,CAAA,aAAA,EAAA,MAAA;AAAA,OAAA,EAAA,CACA,CAAA,CAAA,WAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,IAAA,EAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AAAA;AAAA,OAAA,CADA,EAEA,UAFA,EAGA,CAAA,CAAA,QAAA,EAAA,OAAA,CAHA,sBAIA,KAAA,KAJA,QAKA,CAAA,CAAA,WAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,IAAA,EAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AAAA;AAAA,OAAA,CALA,CAAA,CAAA,CANA,CAaA;;AACA,UAAA,WAAA,GAAA,CAAA,CAAA,KAAA,EAAA;AAAA,iBAAA,CAAA,QAAA,EAAA,aAAA,EAAA,sBAAA,EAAA,MAAA;AAAA,OAAA,EAAA,CACA,CAAA,CAAA,QAAA,EAAA;AAAA,iBAAA;AAAA,OAAA,EAAA,WAAA,CADA,EAEA,CAAA,CAAA,OAAA,EAAA;AAAA,iBAAA;AAAA,OAAA,EAAA,eAAA,CAFA,CAAA,CAAA,CAdA,CAkBA;;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,CAAA,SAAA,CAAA,EAAA;AACA,QAAA,KAAA,EAAA,CAAA,WAAA,CADA;AAEA,QAAA,KAAA,EAAA,KAFA;AAGA,QAAA,OAAA,EAAA;AAHA,OAAA;AAKA;AAzBA;AAjBA,CAAA","sourcesContent":["<template>\n  <b-card-code title=\"Advanced usage\">\n    <b-card-text>\n      <span>When using the </span>\n      <code>this.$bvToast.toast(...)</code>\n      <span>\n        method for generating toasts, you may want the toast content to be more than just a string message. As mentioned\n        in the Toasts on demand section above, you can pass arrays of\n      </span>\n      <code>VNodes</code>\n      <span> as the message and title for more complex content.</span>\n    </b-card-text>\n\n    <b-button\n      v-ripple.400=\"'rgba(113, 102, 240, 0.15)'\"\n      variant=\"outline-primary\"\n      @click=\"popToast\"\n    >\n      Show Toast with custom content\n    </b-button>\n\n    <template #code>\n      {{ codeAdvance }}\n    </template>\n  </b-card-code>\n</template>\n\n<script>\nimport BCardCode from '@core/components/b-card-code'\n// eslint-disable-next-line\nimport { BButton, BSpinner,BCardText } from 'bootstrap-vue'\nimport Ripple from 'vue-ripple-directive'\nimport { codeAdvance } from './code'\n\nexport default {\n  components: {\n    BCardCode,\n    BButton,\n    BCardText,\n    // eslint-disable-next-line\n    BSpinner,\n  },\n  directives: {\n    Ripple,\n  },\n  data() {\n    return {\n      count: 0,\n      codeAdvance,\n    }\n  },\n  methods: {\n    popToast() {\n      // Use a shorter name for this.$createElement\n      const h = this.$createElement\n      // Increment the toast count\n      this.count += 1\n      // Create the message\n      const vNodesMsg = h('p', { class: ['text-center', 'mb-0'] }, [\n        h('b-spinner', { props: { type: 'grow', small: true } }),\n        ' Flashy ',\n        h('strong', 'toast'),\n        ` message #${this.count} `,\n        h('b-spinner', { props: { type: 'grow', small: true } }),\n      ])\n      // Create the title\n      const vNodesTitle = h('div', { class: ['d-flex', 'flex-grow-1', 'align-items-baseline', 'mr-2'] }, [\n        h('strong', { class: 'mr-2' }, 'The Title'),\n        h('small', { class: 'ml-auto font-italics' }, '5 minutes ago'),\n      ])\n      // Pass the VNodes as an array for message and title\n      this.$bvToast.toast([vNodesMsg], {\n        title: [vNodesTitle],\n        solid: false,\n        variant: 'info',\n      })\n    },\n  },\n}\n</script>\n"],"sourceRoot":"src/views/components/toasts"}]}